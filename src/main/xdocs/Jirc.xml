<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xdoc2html.xsl"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "http://forrest.apache.org/dtd/document-v20.dtd">
<document>
  <header>
    <title>Jirc documentation</title>
  </header>
<body>
    <note>If looking for a user friendly way of transforming a Lirc file to
something else, <em>do not read this article</em>. Use the <a
href="IrScrutinizer.html">IrScrutinizer</a> instead, in particular the Lirc
import feature.</note>
      <table>
      <caption>Revision history</caption>
	<tr>
	  <th>Date</th><th>Description</th>
	</tr>
	<tr>
	  <td>2014-01-12</td>
	  <td>Initial version.</td>
	</tr>
	<tr>
	  <td>2014-05-06</td>
	  <td>Updated for version 0.3.0, improving the handling of repeats, and
fixing some bugs.</td>
	</tr>
      </table>
<section>
<title>Introduction</title>
<p>There is a large body of captured IR signals for different remotes/devices in
      the Internet, in particular at <a
 href="lirc.sourceforge.net/remotes/">lirc.sourceforge.net/remotes/</a>. Sometime,
      it is desirable to transfer this information to more universally known
      formats for IR signals, such as the <a href="Glossary.html#CCF">CCF
format</a>. Although <a
href="http://www.lirc.org/html/configure.html#lircd.conf_format">attempts</a>
      have been made to document the format of the Lirc
      format, writing a complete and with Lirc coinciding parser/renderer for
      these files is probably a very difficult undertaking. From this insight,
      "only Lirc understands Lirc files", the program <a
							href="lirc2xml.html">lirc2xml</a>
      was created, as a special driver for the <code>lircd</code> daemon,
      writing an XML file instead of accessing hardware,
      available as a patch to the C sources of Lirc.</p>

<p>For portability reason, a pure Java solution was desired. So I decided
      to translate the appropriate Lirc files to Java, and the present project
      was born. The base of the translation was <a
href="http://sourceforge.net/projects/lirc/files/LIRC/0.9.0/lirc-0.9.0.tar.bz2/">Lirc
version 0.9.0</a>.</p>

<p>The initial version, 0.2.0, did not implement the handling of repeats. The
current version 0.3.0 however implements repetition and the handling of multiple
command numbers, and fixes several small problems, e.g. the handling of
multiple remotes with the same name.</p>

<section><title>Copyright</title>
<p>The original work is copyrighted under the <a
href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html">GNU General Public
License, version 2</a>. Being a derived work, this goes for the present work too.</p>
<p>The program uses <a
href="http://jcommander.org">JCommander</a> by  CÃ©dric Beust to parse the
command line arguments. It is free software with <a
href="https://github.com/cbeust/jcommander/blob/master/license.txt">Apache
2</a> license.</p>
      </section>

<section><title>Program overview</title>
<p>The main goal was, with a moderate effort, to create a (pure) Java version of Lirc2XML, not to make a
faithful translation, nor to create maintainable Java code of the highest quality.</p>


<p>The program basically consists of a parser of the configuration files (class
<code>ConfigFile</code>), some helper classes, and the class
<code>Transmit</code>. The parser has been written from scratch using
<a href="http://www.antlr.org/">ANTLR</a> version 3.4. The classes
	<code>Hardware</code>, <code>IrNCode</code>, <code>IrCodeNode</code>,
	and <code>IrRemote</code> are essentially translations of Lirc's C
	structs with similar names. The class <code>Transmit</code>, essentially a translation of
	the C file <code>translate.c</code>, carries out the rendering of the
	IR signals. The main routine resides in the class
<code>Lirc2Xml</code>, which is written from scratch. The output file is
generated in the general <a href="Girr.html">Girr format</a>, using its <a
href="Girr.html#Supporting+Java+library">supporting Java library</a>. </p>

<p>All references to serial commands have been deleted; it does not belong to
the Lirc domain anyhow (IMHO).</p>
      </section>
    </section>
<section>
<title>Installation</title>
<p>The program is distributed in source format only. For full functionality,
also the <a href="Glossary.html#DecodeIR">DecodeIR</a> library has to be
installed. For this, giving the directory path to the Java VM using the
<code>-Djava.library.path</code> option may be necessary. The
supplied wrapper <code>lirc2xml.sh</code> can be used as an example for
this.</p>
</section>
<section>
<title>Usage</title>
<section>
<title>Command line arguments</title>
	<source>
Usage: Lirc2Xml [options] [configfile]
  Options:
    -c, --ccf
       Generate the CCF ("Hex", "Pronto") form of the signals
       Default: false
    -d, --debug
       Debug
       Default: 0
    -e, --encoding
       Character encoding of the generated XML file
       Default: UTF-8
    -f, --fatraw
       Use the fat format for raw signals
       Default: false
    -h, --help, -?
       Display help message
       Default: false
    -o, --outfile
       Output filename
    -p, --parameters
       Generate the protocol name and parameters (if possible) for the signals
       Default: false
    -R, --raw
       Generate the raw form of the signals
       Default: false
    -r, --remote
       Name of the remote to include in the export (will export all if left
       empty)
    -s, --schemalocation
       Create schema location attribute
       Default: false
    -v, --version
       Display version information
       Default: false
    -x, --xslt
       Link to XSLT stylesheet
</source>
<p>The program has a traditional "Unix" usage. If no file argument is given,
standard input is read. As argument, also a directory can be given, in which case an
entire file hierarchy is traversed for Lirc files, handling unparsable files
gracefully. Also URLs, e.g. <a
href="http://lirc.sourceforge.net/remotes/yamaha/RX-V995">http://lirc.sourceforge.net/remotes/yamaha/RX-V995</a>
can be given as arguments.</p>

<p>On my computer, a local copy of the complete <a
href="http://lirc.sourceforge.net/remotes/">Lirc remote collection</a>
(slightly over 3000 files) is transformed in 51 seconds, allocating around 900MB of memory.</p>
      </section>
<section><title>API documentation</title>
<p><a href="javadoc/Jirc/index.html">Javadoc available here.</a></p>
    </section>
<section>
<title>Restrictions</title>
<p>The parser presently requires the command numbers following the command
names to be hexadecimal only. Command names and remote names containing spaces
are rejected. Commands named "end" are presently not accepted. Names are
assumed to consist of 8-bit characters between "!" and "~", or between
hexadecimal 0xA1 to 0xFF (e.g. using the ASCII or the ISO-8859-1 character
sets). The input files are being read asuming the encoding ISO-8859-1.</p>
      </section>
    </section>
<section><title>Download</title>
<ul>
<li><a href="downloads/Jirc-src-0.3.0.zip">Jirc-src-0.3.0.zip</a>. Also needed is</li>
<li><a href="downloads/Girr-src-1.0.0.zip">Girr-src-1.0.0.zip</a>, and</li>
<li><a href="downloads/IrpMaster-src-1.0.1.zip">IrpMaster-src-1.0.1.zip</a>.</li>
      </ul>
    </section>
<!--section>
<title>References</title>
    </section-->
  </body>
</document>
